CREATE COLLATION public.nocase (provider = icu, deterministic = false, locale = 'und-u-ks-level2');

CREATE TYPE account_role AS ('user', 'editor', 'admin', 'owner');
CREATE TYPE year_status AS ( 'closed', 'ongoing', 'open');
CREATE TYPE show_access_type AS ('draw', 'partial', 'full');

CREATE TABLE migration (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL UNIQUE,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE account (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username text UNIQUE COLLATE nocase,
    email text UNIQUE,
    password bytea NOT NULL,
    salt bytea NOT NULL,
    approved boolean DEFAULT false,
    role account_role DEFAULT 'user'
);

CREATE TABLE session (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id integer NOT NULL REFERENCES account (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    session_id uuid NOT NULL,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE country (
    id text PRIMARY KEY COLLATE public.nocase,
    name text NOT NULL UNIQUE COLLATE public.nocase,
    is_participating boolean NOT NULL DEFAULT true,
    cc2 text NOT NULL COLLATE public.nocase,
    pot integer,
    priority integer,
    available_from bigint DEFAULT '0'::bigint,
    available_until bigint DEFAULT '9999'::bigint
);

CREATE TABLE alternative_name (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    country_id text REFERENCES country (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    from_year_id bigint,
    to_year_id bigint,
    name text
);

CREATE TABLE year (
    id integer UNIQUE PRIMARY KEY,
    host_id text REFERENCES country (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    status year_status NOT NULL DEFAULT 'closed',
    host_city text
);

CREATE TABLE language (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    tag text NOT NULL,
    extlang text,
    region text,
    subvariant text,
    suppress_script text
);

CREATE TABLE song (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    submitter_id integer NOT NULL REFERENCES account (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    country_id text NOT NULL REFERENCES country (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    year_id integer NOT NULL REFERENCES year (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    title text NOT NULL,
    artist text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    native_title text,
    translated_lyrics text,
    romanized_lyrics text,
    native_lyrics text,
    video_link text,
    snippet_start integer,
    snippet_end integer,
    placeholder boolean,
    title_language_id integer,
    native_language_id integer,
    notes text,
    sources text,
    admin_approved boolean NOT NULL DEFAULT false,
    UNIQUE(year_id, country_id)
);

CREATE TABLE song_language (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    song_id integer REFERENCES song (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    language_id integer REFERENCES language (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    priority integer,
    UNIQUE(song_id, language_id)
);

CREATE TABLE point_system (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    number integer
);

CREATE TABLE point (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    point_system_id integer REFERENCES point_system (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    place integer,
    score integer,
    UNIQUE(point_system_id, place)
);

CREATE TABLE show (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    year_id integer REFERENCES year (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    point_system_id integer REFERENCES point_system (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    show_name text COLLATE public.nocase,
    short_name text COLLATE public.nocase,
    voting_opens timestamptz,
    voting_closes timestamptz,
    date date,
    dtf integer,
    sc integer,
    special integer,
    access_type show_access_type
);

CREATE TABLE song_show (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    song_id integer REFERENCES song (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    show_id integer REFERENCES show (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    running_order integer,
    qualifier_order integer,
    UNIQUE(song_id, show_id)
);

CREATE TABLE vote_set (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    voter_id integer NOT NULL REFERENCES account (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    show_id integer NOT NULL REFERENCES show (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    country_id text REFERENCES country (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    nickname text,
    created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(voter_id, show_id)
);

CREATE TABLE vote (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    vote_set_id integer REFERENCES vote_set (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    song_id integer REFERENCES song (id) ON UPDATE RESTRICT ON DELETE RESTRICT,
    score integer NOT NULL,
    UNIQUE(vote_set_id, song_id),
    UNIQUE(vote_set_id, score)
);

CREATE INDEX idx_country_alpha2 ON country (cc2);
CREATE INDEX idx_user_username ON user (username);
CREATE INDEX idx_user_email ON user (email);
CREATE INDEX idx_session_id ON session (session_id);
CREATE INDEX idx_song_submitter ON song (submitter_id);
CREATE INDEX idx_song_country ON song (country_id);
CREATE INDEX idx_song_year ON song (year_id);
CREATE INDEX idx_vote_set_voter ON vote_set (voter_id);
CREATE INDEX idx_vote_set_show ON vote_set (show_id);
CREATE INDEX idx_song_show_song_show ON song_show (song_id, show_id);
CREATE INDEX idx_song_id_country_id ON song (id, country_id);
CREATE INDEX idx_point_system_id_score ON point (point_system_id, score DESC);